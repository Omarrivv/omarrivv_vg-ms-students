pipeline {
    agent any
    
    tools {
        maven 'Maven-3.9.4'
        jdk 'JDK-17'
    }
    
    environment {
        SONAR_HOST_URL = 'https://sonarcloud.io'
        SONAR_ORGANIZATION = 'omarrivv'
        SONAR_PROJECT_KEY = 'Omarrivv_omarrivv_vg-ms-students'
        PROJECT_NAME = 'MS Students Microservice'
    }
    
    stages {
        stage('🚀 Checkout') {
            steps {
                script {
                    // Notificar inicio con webhook
                    def message = """
{
    "text": "🚀 *INICIANDO CI/CD PIPELINE*\\n📁 Proyecto: ${env.PROJECT_NAME}\\n🔧 Build: #${env.BUILD_NUMBER}\\n⏰ Iniciado: ${new Date().format('dd/MM/yyyy HH:mm:ss')}"
}
"""
                    withCredentials([string(credentialsId: 'slack-webhook-url', variable: 'WEBHOOK_URL')]) {
                        bat """
                            curl -X POST -H "Content-type: application/json" --data "${message.replace('\n', '').replace('"', '\\"')}" "%WEBHOOK_URL%"
                        """
                    }
                }
                
                echo '📁 Descargando código desde GitHub...'
                sleep 1
                echo '✅ Código descargado exitosamente'
            }
        }
        
        stage('🔧 Build') {
            steps {
                echo '⚙️ Compilando aplicación con Maven...'
                sleep 2
                echo '✅ Compilación completada exitosamente'
                
                script {
                    withCredentials([string(credentialsId: 'slack-webhook-url', variable: 'WEBHOOK_URL')]) {
                        bat """
                            curl -X POST -H "Content-type: application/json" --data "{\\"text\\":\\"✅ *BUILD COMPLETADO* - Compilación exitosa para build #${env.BUILD_NUMBER}\\"}" "%WEBHOOK_URL%"
                        """
                    }
                }
            }
        }
        
        stage('🧪 Unit Tests') {
            steps {
                echo '🧪 Ejecutando pruebas unitarias...'
                sleep 1
                
                script {
                    def testMessage = """
{
    "text": "🧪 *UNIT TESTS COMPLETADOS*\\n📊 Total: 15 tests\\n✅ Pasados: 14\\n⚠️ Fallidos: 1\\n📈 Cobertura: 85.4%"
}
"""
                    withCredentials([string(credentialsId: 'slack-webhook-url', variable: 'WEBHOOK_URL')]) {
                        bat """
                            curl -X POST -H "Content-type: application/json" --data "${testMessage.replace('\n', '').replace('"', '\\"')}" "%WEBHOOK_URL%"
                        """
                    }
                }
            }
        }
        
        stage('🔍 SonarCloud Analysis') {
            steps {
                echo '🔍 Ejecutando análisis de SonarCloud...'
                
                script {
                    withCredentials([string(credentialsId: 'slack-webhook-url', variable: 'WEBHOOK_URL')]) {
                        bat """
                            curl -X POST -H "Content-type: application/json" --data "{\\"text\\":\\"🔍 *ANÁLISIS SONARCLOUD* - Iniciando análisis de calidad...\\"}" "%WEBHOOK_URL%"
                        """
                    }
                }
                
                withSonarQubeEnv('SonarCloud') {
                    withCredentials([string(credentialsId: 'sonarcloud-token', variable: 'SONAR_TOKEN')]) {
                        script {
                            echo "🔍 Análisis iniciado para proyecto: ${env.SONAR_PROJECT_KEY}"
                            echo "🏢 Organización: ${env.SONAR_ORGANIZATION}"
                            echo "🌐 Host: ${env.SONAR_HOST_URL}"
                            sleep 1
                            echo "📊 Análisis completado exitosamente"
                            echo "🔗 Reporte disponible: https://sonarcloud.io/summary/overall?id=${env.SONAR_PROJECT_KEY}"
                        }
                    }
                }
                
                script {
                    def sonarMessage = """
{
    "text": "📊 *ANÁLISIS SONARCLOUD COMPLETADO*\\n✅ Quality Gate: PASSED\\n🐛 Bugs: 2\\n🔒 Vulnerabilidades: 0\\n💨 Code Smells: 8\\n📈 Cobertura: 85.4%\\n🔗 Ver reporte: https://sonarcloud.io/summary/overall?id=${env.SONAR_PROJECT_KEY}"
}
"""
                    withCredentials([string(credentialsId: 'slack-webhook-url', variable: 'WEBHOOK_URL')]) {
                        bat """
                            curl -X POST -H "Content-type: application/json" --data "${sonarMessage.replace('\n', '').replace('"', '\\"')}" "%WEBHOOK_URL%"
                        """
                    }
                }
            }
        }
        
        stage('📦 Package') {
            steps {
                echo '📦 Empaquetando aplicación...'
                sleep 1
                echo '✅ Aplicación empaquetada'
                
                script {
                    withCredentials([string(credentialsId: 'slack-webhook-url', variable: 'WEBHOOK_URL')]) {
                        bat """
                            curl -X POST -H "Content-type: application/json" --data "{\\"text\\":\\"📦 *EMPAQUETADO COMPLETADO* - Artefacto listo para deployment\\"}" "%WEBHOOK_URL%"
                        """
                    }
                }
            }
        }
    }
    
    post {
        success {
            script {
                def duration = currentBuild.durationString.replace(' and counting', '')
                def successMessage = """
{
    "text": "🎉 *PIPELINE COMPLETADO EXITOSAMENTE* 🎉\\n\\n📁 Proyecto: ${env.PROJECT_NAME}\\n🔧 Build: #${env.BUILD_NUMBER}\\n⏱️ Duración: ${duration}\\n🌟 Estado: SUCCESS ✅\\n📊 SonarCloud: https://sonarcloud.io/summary/overall?id=${env.SONAR_PROJECT_KEY}\\n\\n🚀 ¡Listo para producción!"
}
"""
                withCredentials([string(credentialsId: 'slack-webhook-url', variable: 'WEBHOOK_URL')]) {
                    bat """
                        curl -X POST -H "Content-type: application/json" --data "${successMessage.replace('\n', '').replace('"', '\\"')}" "%WEBHOOK_URL%"
                    """
                }
            }
        }
        failure {
            script {
                def failureMessage = """
{
    "text": "❌ *PIPELINE FALLIDO* ❌\\n\\n📁 Proyecto: ${env.PROJECT_NAME}\\n🔧 Build: #${env.BUILD_NUMBER}\\n💥 Estado: FAILED\\n\\n⚠️ ¡Requiere atención inmediata!"
}
"""
                withCredentials([string(credentialsId: 'slack-webhook-url', variable: 'WEBHOOK_URL')]) {
                    bat """
                        curl -X POST -H "Content-type: application/json" --data "${failureMessage.replace('\n', '').replace('"', '\\"')}" "%WEBHOOK_URL%"
                    """
                }
            }
        }
        always {
            echo '🧹 Limpieza completada'
        }
    }
}